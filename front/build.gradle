description = 'Sample graphql project front module'
group = 'sample frontend for graphql'

// c plus plus plugin
apply plugin : 'cpp'


model {
    components {
        main(NativeExecutableSpec)
    }

    binaries {
        all {
            // Define a preprocessor macro for every binary
            // cppCompiler.define "NDEBUG"

            // Define toolchain-specific compiler and linker options
            if (toolChain in Gcc) {
                // cppCompiler.args "-std=c++17", "-O2", "-fno-access-control"
                cppCompiler.args "-std=c++17"
                // linker.args "-Xlinker", "-S"
                linker.args "-lcurl", "-ljsoncpp"
            }
        }
    }
}

task('runExe', group: "application").doLast {
    exec {
        commandLine "$buildDir/exe/main/main"
//        args "8 bd du port"
    }
}

task('showCompilerOptions') {
    doLast {
        println '\n-----------------------------------------------------\n'
        println 'Compiler options:'
        FileTree tree = fileTree('target').include('**/options.txt')
        // Iterate over the contents of a tree
        tree.each {File file ->
            println 'Content of file ' + file + ':\n'
            println file.text
            println '------\n'
        }
    }
}

task('showCompilerOutput') {
//    dependsOn showCompilerOptions
    doLast {
        println '\n-----------------------------------------------------\n'
        println 'Compiler output:'
        FileTree tree = fileTree('target').include('**/output.txt')
        // Iterate over the contents of a tree
        tree.each {File file ->
            println 'Content of file ' + file + ':\n'
            println file.text
            println '------\n'
        }
    }
}

build.finalizedBy showCompilerOutput
